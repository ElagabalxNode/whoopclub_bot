#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è group_name –∏–∑ —Ç–∞–±–ª–∏—Ü—ã slots
"""

import sqlite3
import os

def migrate_database():
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    db_path = "database/bot.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = f"{db_path}.backup"
    if not os.path.exists(backup_path):
        import shutil
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    else:
        print(f"‚ÑπÔ∏è  –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {backup_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª–µ group_name
        cursor.execute("PRAGMA table_info(slots)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'group_name' not in columns:
            print("‚ÑπÔ∏è  –ü–æ–ª–µ group_name —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ slots")
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
        
        print("üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ group_name, –Ω–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –ø–æ–ª—è group_name
        cursor.execute("""
            CREATE TABLE slots_new (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                training_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                channel TEXT NOT NULL,
                payment_type TEXT NOT NULL,
                status TEXT NOT NULL,
                created_at TEXT NOT NULL,
                FOREIGN KEY (training_id) REFERENCES trainings(id)
            )
        """)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∏—Å–∫–ª—é—á–∞—è –ø–æ–ª–µ group_name
        cursor.execute("""
            INSERT INTO slots_new (id, training_id, user_id, channel, payment_type, status, created_at)
            SELECT id, training_id, user_id, channel, payment_type, status, created_at
            FROM slots
        """)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM slots_new")
        count = cursor.fetchone()[0]
        print(f"üìä –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("DROP TABLE slots")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("ALTER TABLE slots_new RENAME TO slots")
        
        conn.commit()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –ü–æ–ª–µ group_name —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã slots")
        print(f"üíæ –í—Å–µ {count} –∑–∞–ø–∏—Å–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        import shutil
        shutil.copy2(backup_path, db_path)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        raise e
    
    finally:
        conn.close()

if __name__ == "__main__":
    migrate_database()