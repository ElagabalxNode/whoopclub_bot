from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from database.db import get_connection
from config import ADMINS
from datetime import datetime
import asyncio

router = Router()

CHANNELS = {
    "fast": 5,
    "standard": 7
}

@router.message(F.text.contains("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))
async def show_trainings_list(message: Message):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, date FROM trainings
            WHERE status = 'open'
            ORDER BY date ASC
        """)
        rows = cursor.fetchall()

    if not rows:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=datetime.fromisoformat(date_str).strftime("%d.%m.%Y %H:%M"), callback_data=f"select_training:{training_id}")]
        for training_id, date_str in rows
    ])

    await message.answer("üìÖ –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("select_training:"))
async def show_training_groups(callback: CallbackQuery):
    training_id = int(callback.data.split(":")[1])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥—Ä—É–ø–ø–∞", callback_data=f"book:{training_id}:fast"),
            InlineKeyboardButton(text="üèÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", callback_data=f"book:{training_id}:standard")
        ]
    ])

    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ {training_id}:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("book:"))
async def choose_channel(callback: CallbackQuery):
    _, training_id, group = callback.data.split(":")
    training_id = int(training_id)

    total = CHANNELS.get(group)
    all_channels = [f"–ö–∞–Ω–∞–ª {i+1}" for i in range(total)]

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT channel FROM slots
            WHERE training_id = ? AND group_name = ? AND status IN ('pending', 'confirmed')
        """, (training_id, group))
        taken = [row[0] for row in cursor.fetchall()]

    available = [ch for ch in all_channels if ch not in taken]

    if not available:
        await callback.message.edit_text("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=ch, callback_data=f"reserve:{training_id}:{group}:{ch}")]
        for ch in available
    ])

    await callback.message.edit_text(f"üß© –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –≥—Ä—É–ø–ø–µ <b>{'–ë—ã—Å—Ç—Ä–∞—è' if group == 'fast' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}</b>:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("reserve:"))
async def reserve_slot(callback: CallbackQuery):
    _, training_id, group, channel = callback.data.split(":")
    training_id = int(training_id)
    user_id = callback.from_user.id
    username = callback.from_user.username

    with get_connection() as conn:
        cursor = conn.cursor()

        cursor.execute("""
            SELECT COUNT(*) FROM slots
            WHERE training_id = ? AND user_id = ?
        """, (training_id, user_id))
        already = cursor.fetchone()[0]
        if already:
            await callback.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.", show_alert=True)
            return

        cursor.execute("""
            INSERT INTO slots (training_id, user_id, group_name, channel, status, created_at)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (
            training_id,
            user_id,
            group,
            channel,
            "pending",
            datetime.now().isoformat()
        ))
        slot_id = cursor.lastrowid
        conn.commit()

    await notify_admins_about_booking(callback.bot, training_id, user_id, group, channel, slot_id, username)

    await callback.message.edit_text(
        f"‚úÖ –í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ <b>{channel}</b> –≤ –≥—Ä—É–ø–ø–µ <b>{'–ë—ã—Å—Ç—Ä–∞—è' if group == 'fast' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}</b>.\n"
        f"üí∏ –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )

async def notify_admins_about_booking(bot, training_id, user_id, group, channel, slot_id, username):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT nickname, system FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()
        cursor.execute("SELECT date FROM trainings WHERE id = ?", (training_id,))
        training_row = cursor.fetchone()

    nickname = user[0] if user else "-"
    system = user[1] if user else "-"
    training_date = datetime.fromisoformat(training_row[0]).strftime("%d.%m.%Y %H:%M") if training_row else "?"
    user_link = f"@{username}" if username else f"<a href='tg://user?id={user_id}'>–ø—Ä–æ—Ñ–∏–ª—å</a>"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{slot_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{slot_id}")
        ]
    ])

    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É <b>{training_date}</b>:\n"
        f"üë§ {user_link} (ID: <code>{user_id}</code>)\n"
        f"üèÅ –ì—Ä—É–ø–ø–∞: <b>{'–ë—ã—Å—Ç—Ä–∞—è' if group == 'fast' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}</b>\n"
        f"üì° –ö–∞–Ω–∞–ª: <b>{channel}</b>\n"
        f"üéÆ OSD: <b>{nickname}</b>\n"
        f"üé• –í–∏–¥–µ–æ: <b>{system}</b>\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"
    )

    for admin in ADMINS:
        await bot.send_message(admin, text, reply_markup=kb)

@router.callback_query(F.data.startswith("confirm:"))
async def confirm_booking(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])
    with get_connection() as conn:
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        cursor.execute("SELECT user_id FROM slots WHERE id = ?", (slot_id,))
        row = cursor.fetchone()
        if not row:
            await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        user_id = row[0]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cursor.execute("UPDATE slots SET status = 'confirmed' WHERE id = ?", (slot_id,))

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –ø–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–Ω–æ
        cursor.execute("SELECT subscription FROM users WHERE user_id = ?", (user_id,))
        sub_row = cursor.fetchone()
        if sub_row and sub_row[0] and sub_row[0] > 0:
            cursor.execute("UPDATE users SET subscription = subscription - 1 WHERE user_id = ?", (user_id,))

        conn.commit()

    await callback.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    await callback.bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥—ë–º –≤–∞—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ üõ∏")


@router.callback_query(F.data.startswith("reject:"))
async def reject_booking(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM slots WHERE id = ?", (slot_id,))
        row = cursor.fetchone()
        user_id = row[0] if row else None
        cursor.execute("DELETE FROM slots WHERE id = ?", (slot_id,))
        conn.commit()

    await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    if user_id:
        await callback.bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
