from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from database.db import get_connection
from config import ADMINS, PAYMENT_LINK
from datetime import datetime, timedelta

router = Router()

@router.message(F.text.contains("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))
async def show_available_trainings(message: Message):
    user_id = message.from_user.id
    now = datetime.now()

    with get_connection() as conn:
        cursor = conn.cursor()

        cutoff_date = (now - timedelta(hours=1)).isoformat()

        cursor.execute("""
            SELECT t.id, t.date,
                (SELECT COUNT(*) FROM slots WHERE training_id = t.id) AS booked_count,
                (SELECT COUNT(*) FROM slots WHERE training_id = t.id AND user_id = ?) AS user_booked
            FROM trainings t
            WHERE t.status = 'open' AND datetime(t.date) > ?
            ORDER BY t.date ASC
            LIMIT 6
        """, (user_id, cutoff_date))

        trainings = cursor.fetchall()

    if not trainings:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return

    keyboard = []
    for training_id, date_str, booked_count, user_booked in trainings:
        date_obj = datetime.fromisoformat(date_str)

        # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        weekday_label = ""
        if date_obj.weekday() == 1:
            weekday_label = "–í—Ç–æ—Ä–Ω–∏–∫ "
        elif date_obj.weekday() == 5:
            weekday_label = "–°—É–±–±–æ—Ç–∞ "

        label = f"{weekday_label}{date_obj.strftime('%d.%m %H:%M')}"

        user_booked = user_booked or 0
        booked_count = booked_count or 0

        # –ü–æ–º–µ—Ç–∫–∞
        if user_booked > 0:
            label += " ‚úÖ"
        elif booked_count >= 7:  # –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –º–∞–∫—Å–∏–º—É–º –º–µ—Å—Ç
            label += " ‚ùå"

        keyboard.append([InlineKeyboardButton(text=label, callback_data=f"select_training:{training_id}")])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))



@router.callback_query(F.data.startswith("select_training:"))
async def show_group_choice(callback: CallbackQuery):
    training_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    with get_connection() as conn:
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω?
        cursor.execute("""
            SELECT COUNT(*) FROM slots
            WHERE training_id = ? AND user_id = ? AND status IN ('pending', 'confirmed')
        """, (training_id, user_id))
        already = cursor.fetchone()[0]

        if already:
            await callback.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–ª–æ—Ç–æ–≤ –±–æ–ª—å—à–µ 7 ‚Äî –∑–Ω–∞—á–∏—Ç –º–µ—Å—Ç –Ω–µ—Ç
        cursor.execute("""
            SELECT COUNT(*) FROM slots
            WHERE training_id = ? AND status IN ('pending', 'confirmed')
        """, (training_id,))
        total_booked = cursor.fetchone()[0]

        if total_booked >= 7:
            await callback.answer("–ú–µ—Å—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ‚ùå", show_alert=True)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        cursor.execute("SELECT date FROM trainings WHERE id = ?", (training_id,))
        row = cursor.fetchone()

    if not row:
        await callback.message.edit_text("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    date_str = datetime.fromisoformat(row[0]).strftime("%d.%m.%Y %H:%M")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥—Ä—É–ø–ø–∞", callback_data=f"book:{training_id}:fast"),
            InlineKeyboardButton(text="üèÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", callback_data=f"book:{training_id}:standard")
        ]
    ])

    await callback.message.edit_text(f"üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {date_str}\n\n–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)



@router.callback_query(F.data.startswith("book:"))
async def choose_channel(callback: CallbackQuery):
    _, training_id, group = callback.data.split(":")
    training_id = int(training_id)

    # –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    GROUP_CHANNELS = {
        "fast": ["R2", "F2", "F4", "R7", "R8"],
        "standard": ["R1", "R2", "F2", "F4", "R7", "R8", "L1"]
    }

    all_channels = GROUP_CHANNELS.get(group)
    if not all_channels:
        await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞.")
        return

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT channel FROM slots
            WHERE training_id = ? AND group_name = ? AND status IN ('pending', 'confirmed')
        """, (training_id, group))
        taken = [row[0] for row in cursor.fetchall()]

    available = [ch for ch in all_channels if ch not in taken]

    if not available:
        await callback.message.edit_text("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=ch, callback_data=f"reserve:{training_id}:{group}:{ch}")]
        for ch in available
    ])

    await callback.message.edit_text(
        f"üß© –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –≥—Ä—É–ø–ø–µ <b>{'–ë—ã—Å—Ç—Ä–∞—è' if group == 'fast' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}</b>:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("reserve:"))
async def reserve_slot(callback: CallbackQuery):
    _, training_id, group, channel = callback.data.split(":")
    training_id = int(training_id)
    user_id = callback.from_user.id
    username = callback.from_user.username

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT subscription FROM users WHERE user_id = ?", (user_id,))
        sub = cursor.fetchone()
        sub_count = sub[0] if sub else 0

        if sub_count > 0:
            payment_type = "subscription"
        else:
            payment_type = "manual"

        cursor.execute("""
            INSERT INTO slots (training_id, user_id, group_name, channel, status, created_at, payment_type)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            training_id,
            user_id,
            group,
            channel,
            "pending",
            datetime.now().isoformat(),
            payment_type
        ))
        slot_id = cursor.lastrowid
        conn.commit()

    if payment_type == "subscription":
        await notify_admins_about_booking(
    callback.bot, training_id, user_id, group, channel, slot_id,
    username, payment_type, callback.from_user.full_name
)
        await callback.message.edit_text(
            f"‚úÖ –í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ <b>{channel}</b> –≤ –≥—Ä—É–ø–ø–µ <b>{'–ë—ã—Å—Ç—Ä–∞—è' if group == 'fast' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}</b>.\n"
            f"üéü –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∞–±–æ–Ω–µ–º–µ–Ω—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_payment:{slot_id}")]
        ])
        await callback.message.edit_text(
            f"‚úÖ –í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ <b>{channel}</b> –≤ –≥—Ä—É–ø–ø–µ <b>{'–ë—ã—Å—Ç—Ä–∞—è' if group == 'fast' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}</b>.\n"
            f"üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ <b>800‚ÇΩ</b> –ø–æ —Å—Å—ã–ª–∫–µ: <a href='{PAYMENT_LINK}'>–û–ü–õ–ê–¢–ò–¢–¨</a>\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard
        )

@router.callback_query(F.data.startswith("confirm_payment:"))
async def confirm_manual_payment(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    username = callback.from_user.username

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT training_id, group_name, channel FROM slots WHERE id = ?", (slot_id,))
        row = cursor.fetchone()

    if not row:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    training_id, group, channel = row
    await notify_admins_about_booking(
    callback.bot, training_id, user_id, group, channel, slot_id,
    username, "manual", callback.from_user.full_name
)
    await callback.message.edit_text("üîî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")

async def notify_admins_about_booking(bot, training_id, user_id, group, channel, slot_id, username, payment_type, full_name):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT nickname, system, subscription FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()

    nickname = user[0] if user else "-"
    system = user[1] if user else "-"
    remaining = user[2] if user else 0

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º @username –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ ‚Äî –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è
    user_link = f"@{username}" if username else f"<a href='tg://user?id={user_id}'>{full_name}</a>"

    payment_desc = "üéü –ê–±–æ–Ω–µ–º–µ–Ω—Ç" if payment_type == "subscription" else "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã"
    if payment_type == "subscription":
        payment_desc += f" (–æ—Å—Ç–∞–ª–æ—Å—å {remaining})"

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{slot_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{slot_id}")
    ]])

    text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n"
        f"üë§ {user_link} (ID: <code>{user_id}</code>)\n"
        f"üèÅ –ì—Ä—É–ø–ø–∞: <b>{'–ë—ã—Å—Ç—Ä–∞—è' if group == 'fast' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}</b>\n"
        f"üì° –ö–∞–Ω–∞–ª: <b>{channel}</b>\n"
        f"üéÆ OSD: <b>{nickname}</b>\n"
        f"üé• –í–∏–¥–µ–æ: <b>{system}</b>\n"
        f"{payment_desc}\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"
    )

    for admin in ADMINS:
        await bot.send_message(admin, text, reply_markup=kb)

@router.callback_query(F.data.startswith("confirm:"))
async def confirm_booking(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])

    with get_connection() as conn:
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("""
            SELECT s.user_id, s.group_name, s.channel, s.payment_type, t.date, u.nickname, u.system
            FROM slots s
            JOIN trainings t ON s.training_id = t.id
            JOIN users u ON s.user_id = u.user_id
            WHERE s.id = ?
        """, (slot_id,))
        row = cursor.fetchone()

    if not row:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    user_id, group, channel, payment_type, training_date, nickname, system = row
    username = callback.from_user.username  # –≠—Ç–æ –∞–¥–º–∏–Ω, –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫

    # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–ø–∏—Å–∞—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE slots SET status = 'confirmed' WHERE id = ?", (slot_id,))
        if payment_type == "subscription":
            cursor.execute("UPDATE users SET subscription = subscription - 1 WHERE user_id = ?", (user_id,))
        conn.commit()

    await callback.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    await callback.bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥—ë–º –≤–∞—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ üõ∏")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    group_label = "‚ö° –ë—ã—Å—Ç—Ä–∞—è" if group == "fast" else "üèÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"
    date_fmt = datetime.fromisoformat(training_date).strftime("%d.%m.%Y %H:%M")
    payment_text = "üéü –ê–±–æ–Ω–µ–º–µ–Ω—Ç" if payment_type == "subscription" else "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º"
    name = callback.from_user.full_name
    user_link = f"@{username}" if username else f"<a href='tg://user?id={user_id}'>{name}</a>"

    admin_message = (
        f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–ø–∏—Å—å:\n"
        f"üë§ {user_link} (ID: <code>{user_id}</code>)\n"
        f"üìÖ –î–∞—Ç–∞: <b>{date_fmt}</b>\n"
        f"üèÅ –ì—Ä—É–ø–ø–∞: <b>{group_label}</b>\n"
        f"üì° –ö–∞–Ω–∞–ª: <b>{channel}</b>\n"
        f"üéÆ OSD: <b>{nickname}</b>\n"
        f"üé• –í–∏–¥–µ–æ: <b>{system}</b>\n"
        f"{payment_text}"
    )

    await callback.bot.send_message(callback.from_user.id, admin_message)


@router.callback_query(F.data.startswith("reject:"))
async def reject_booking(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])
    with get_connection() as conn:
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        cursor.execute("""
            SELECT s.user_id, s.status, s.group_name, s.channel, s.payment_type, t.date,
                   u.nickname, u.system
            FROM slots s
            JOIN trainings t ON s.training_id = t.id
            JOIN users u ON s.user_id = u.user_id
            WHERE s.id = ?
        """, (slot_id,))
        row = cursor.fetchone()

        if not row:
            await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        user_id, status, group, channel, payment_type, training_date, nickname, system = row

        if status == "confirmed":
            await callback.answer("‚ùó –≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–æ–º.", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("DELETE FROM slots WHERE id = ?", (slot_id,))
        conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    await callback.bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ –¥–ª—è –∞–¥–º–∏–Ω–∞
    group_label = "‚ö° –ë—ã—Å—Ç—Ä–∞—è" if group == "fast" else "üèÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"
    date_fmt = datetime.fromisoformat(training_date).strftime("%d.%m.%Y %H:%M")
    payment_text = "üéü –ê–±–æ–Ω–µ–º–µ–Ω—Ç" if payment_type == "subscription" else "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º"
    name = callback.from_user.full_name
    user_link = f"<a href='tg://user?id={user_id}'>{name}</a>"

    admin_message = (
        f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å:\n"
        f"üë§ {user_link} (ID: <code>{user_id}</code>)\n"
        f"üìÖ –î–∞—Ç–∞: <b>{date_fmt}</b>\n"
        f"üèÅ –ì—Ä—É–ø–ø–∞: <b>{group_label}</b>\n"
        f"üì° –ö–∞–Ω–∞–ª: <b>{channel}</b>\n"
        f"üéÆ OSD: <b>{nickname}</b>\n"
        f"üé• –í–∏–¥–µ–æ: <b>{system}</b>\n"
        f"{payment_text}"
    )

    await callback.bot.send_message(callback.from_user.id, admin_message)

@router.message(F.text.contains("–ú–æ–∏ –∑–∞–ø–∏—Å–∏"))
async def show_my_bookings(message: Message):
    user_id = message.from_user.id

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT t.date, s.group_name, s.channel, s.status
            FROM slots s
            JOIN trainings t ON s.training_id = t.id
            WHERE s.user_id = ?
            ORDER BY t.date ASC
        """, (user_id,))
        rows = cursor.fetchall()

    if not rows:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
        return

    lines = ["üìÖ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"]
    for date_str, group, channel, status in rows:
        date_fmt = datetime.fromisoformat(date_str).strftime("%d.%m.%Y %H:%M")
        group_label = "‚ö° –ë—ã—Å—Ç—Ä–∞—è" if group == "fast" else "üèÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"
        status_label = "‚è≥ –û–∂–∏–¥–∞–µ—Ç" if status == "pending" else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        lines.append(f"‚Äî {date_fmt} | {group_label} | {channel} | {status_label}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking_menu")]
    ])

    await message.answer("\n".join(lines), reply_markup=keyboard)

#–æ—Ç–º–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

@router.callback_query(F.data == "cancel_booking_menu")
async def show_user_bookings_to_cancel(callback: CallbackQuery):
    user_id = callback.from_user.id
    now = datetime.now()

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT s.id, t.date
            FROM slots s
            JOIN trainings t ON s.training_id = t.id
            WHERE s.user_id = ? AND s.status = 'confirmed' AND datetime(t.date) > ?
            ORDER BY t.date ASC
        """, (user_id, now.isoformat()))
        bookings = cursor.fetchall()

    if not bookings:
        await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=datetime.fromisoformat(date).strftime("%d.%m %H:%M"),
                callback_data=f"ask_cancel:{slot_id}"
            )]
            for slot_id, date in bookings
        ]
    )

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("ask_cancel:"))
async def ask_to_cancel(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT t.date FROM slots s
            JOIN trainings t ON s.training_id = t.id
            WHERE s.id = ?
        """, (slot_id,))
        row = cursor.fetchone()

    if not row:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    training_date = datetime.fromisoformat(row[0])
    now = datetime.now()
    hours_before = (training_date - now).total_seconds() / 3600

    text = (
        f"üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {training_date.strftime('%d.%m %H:%M')}\n\n"
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n"
        f"{'üí∏ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω.' if hours_before > 24 else '‚ö†Ô∏è –ú–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–µ –≤–µ—Ä–Ω—ë—Ç—Å—è, —Å—Ä–µ–¥—Å—Ç–≤–∞ —É–π–¥—É—Ç –≤ –¥–æ–Ω–∞—Ç.'}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel:{slot_id}"),
            InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="cancel")
        ]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("confirm_cancel:"))
async def confirm_cancel_request(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT training_id FROM slots WHERE id = ? AND user_id = ?
        """, (slot_id, user_id))
        row = cursor.fetchone()

        if not row:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cursor.execute("UPDATE slots SET status = 'pending_cancel' WHERE id = ?", (slot_id,))
        conn.commit()

    await callback.message.edit_text("‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT s.user_id, s.group_name, s.channel, s.payment_type, t.date,
                   u.nickname, u.system
            FROM slots s
            JOIN trainings t ON s.training_id = t.id
            JOIN users u ON s.user_id = u.user_id
            WHERE s.id = ?
        """, (slot_id,))
        row = cursor.fetchone()

    if not row:
        for admin in ADMINS:
            await callback.bot.send_message(admin, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ—Ç–µ {slot_id}")
        return

    user_id, group, channel, payment_type, training_date, nickname, system = row
    full_name = callback.from_user.full_name
    username = callback.from_user.username
    user_link = f"@{username}" if username else f"<a href='tg://user?id={user_id}'>{full_name}</a>"

    group_label = "‚ö° –ë—ã—Å—Ç—Ä–∞—è" if group == "fast" else "üèÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è"
    date_fmt = datetime.fromisoformat(training_date).strftime("%d.%m.%Y %H:%M")
    payment_text = "üéü –ê–±–æ–Ω–µ–º–µ–Ω—Ç" if payment_type == "subscription" else "üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º"

    text = (
        f"üîî –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:\n"
        f"üë§ {user_link} (ID: <code>{user_id}</code>)\n"
        f"üìÖ –î–∞—Ç–∞: <b>{date_fmt}</b>\n"
        f"üèÅ –ì—Ä—É–ø–ø–∞: <b>{group_label}</b>\n"
        f"üì° –ö–∞–Ω–∞–ª: <b>{channel}</b>\n"
        f"üéÆ OSD: <b>{nickname}</b>\n"
        f"üé• –í–∏–¥–µ–æ: <b>{system}</b>\n"
        f"{payment_text}\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É", callback_data=f"admin_cancel:{slot_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_cancel:{slot_id}")
    ]])

    for admin in ADMINS:
        await callback.bot.send_message(admin, text, reply_markup=kb, parse_mode="HTML")
@router.callback_query(F.data.startswith("admin_cancel:"))
async def admin_confirm_cancel(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT user_id, payment_type
            FROM slots
            WHERE id = ? AND status = 'pending_cancel'
        """, (slot_id,))
        row = cursor.fetchone()

        if not row:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
            return

        user_id, payment_type = row

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("DELETE FROM slots WHERE id = ?", (slot_id,))
        if payment_type == "subscription":
            cursor.execute("UPDATE users SET subscription = subscription + 1 WHERE user_id = ?", (user_id,))
        conn.commit()

    await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    await callback.bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.\nüéü –ê–±–æ–Ω–µ–º–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω.")

@router.callback_query(F.data.startswith("admin_reject_cancel:"))
async def admin_reject_cancel(callback: CallbackQuery):
    slot_id = int(callback.data.split(":")[1])

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE slots SET status = 'confirmed' WHERE id = ? AND status = 'pending_cancel'", (slot_id,))
        if cursor.rowcount == 0:
            await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
            return
        conn.commit()

    await callback.message.edit_text("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")