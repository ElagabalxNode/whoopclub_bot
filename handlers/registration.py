from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database.db import get_connection
from keyboards.menu import get_main_keyboard
from config import REQUIRED_CHAT_ID

router = Router()

class Registration(StatesGroup):
    enter_nickname = State()
    select_system = State()

#–î–ª—è –¥–æ–±—ã—á—ã id —á–∞—Ç–∞
#@router.message()
#async def debug_chat_id(message: Message):
#    await message.answer(f"Chat ID: <code>{message.chat.id}</code>", parse_mode="HTML")

@router.message(F.text == "/start")
async def start_registration(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–ª–µ–Ω—Å—Ç–≤–æ –≤ —á–∞—Ç–µ
    try:
        chat_member = await message.bot.get_chat_member(REQUIRED_CHAT_ID, user_id)
        if chat_member.status in ("left", "kicked"):
            raise ValueError("Not in group")
    except:
        await message.answer(
            "‚ùå –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤—Å—Ç—É–ø–∏ –≤ –Ω–∞—à —á–∞—Ç:\n"
            "üëâ https://t.me/+5B0lB4v2GAoyNjcy",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT nickname, system FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()

    if row:
        nickname, system = row
        await message.answer(
            f"üëã –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"üë§ –ù–∏–∫–Ω–µ–π–º: {nickname}\n"
            f"üõ†Ô∏è –°–∏—Å—Ç–µ–º–∞: {system}",
            reply_markup=get_main_keyboard()
        )
        return

    # –ï—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∑–æ–≤–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º / OSD:")
    await state.set_state(Registration.enter_nickname)

@router.message(Registration.enter_nickname)
async def process_nickname(message: Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="HDZero"), KeyboardButton(text="–ê–Ω–∞–ª–æ–≥")],
            [KeyboardButton(text="DJI"), KeyboardButton(text="WS")]
        ],
        resize_keyboard=True
    )
    await message.answer("üöÅ –í—ã–±–µ—Ä–∏ —Å–∏—Å—Ç–µ–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –ª–µ—Ç–∞–µ—à—å:", reply_markup=keyboard)
    await state.set_state(Registration.select_system)

@router.message(Registration.select_system)
async def finish_registration(message: Message, state: FSMContext):
    data = await state.update_data(system=message.text)
    await state.clear()

    user_id = message.from_user.id
    nickname = data["nickname"]
    system = data["system"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT OR REPLACE INTO users (user_id, nickname, system) VALUES (?, ?, ?)",
            (user_id, nickname, system)
        )
        conn.commit()

    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë§ –ù–∏–∫–Ω–µ–π–º: {nickname}\n"
        f"üõ†Ô∏è –°–∏—Å—Ç–µ–º–∞: {system}",
        reply_markup=get_main_keyboard()
    )
    welcome_message = (
    "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í—É–ø–ö–ª—É–±!</b>\n\n"
    "üèÅ –ß–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
    "‚Ä¢ üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
    "‚Ä¢ üéü –ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç\n"
    "‚Ä¢ üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
    "‚Ä¢ üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é\n\n"
    "üìç <b>–ì–¥–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?</b>\n"
    "üè¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ö–æ–º–ø–ª–µ–∫—Å –ë—É—Ç—ã—Ä—Å–∫–∏–π\n"
    "üìç –ê–¥—Ä–µ—Å: —É–ª. –Ø–±–ª–æ—á–∫–æ–≤–∞, –¥.3\n"
    "üö∂‚Äç‚ôÇÔ∏è –ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ: <b>–î–º–∏—Ç—Ä–æ–≤—Å–∫–∞—è</b> (900 –º)\n"
    "üó∫ <a href='https://yandex.ru/maps/?text=—É–ª–∏—Ü–∞%20–Ø–±–ª–æ—á–∫–æ–≤–∞%203'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n\n"
    "üïò <b>–ö–æ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?</b>\n"
    "üìÖ –ö–∞–∂–¥—ã–π <b>–≤—Ç–æ—Ä–Ω–∏–∫ –≤ 19:00</b> –∏ –∏–Ω–æ–≥–¥–∞ –≤ <b>—Å—É–±–±–æ—Ç—É –≤ 16:00</b>\n\n"
    "üëâ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∫–Ω–æ–ø–∫–µ <b>¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª</b> –≤ –º–µ–Ω—é.\n\n"
    "üöÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥—Ä–æ–Ω-—Ä–µ–π—Å–µ—Ä–æ–≤!"
)

    await message.answer(welcome_message, parse_mode="HTML")