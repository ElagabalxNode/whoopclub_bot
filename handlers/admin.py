from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMINS
from database.db import get_connection
from datetime import datetime

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class NewTraining(StatesGroup):
    waiting_for_date = State()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–µ–≥–æ Telegram ID
@router.message(F.text == "/id")
async def get_id(message: Message):
    await message.answer(f"ü™™ –¢–≤–æ–π Telegram ID: <code>{message.from_user.id}</code>")

# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞
@router.message(F.text == "/new_training")
async def ask_for_date(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `YYYY-MM-DD HH:MM` (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-06-11 18:30):")
    await state.set_state(NewTraining.waiting_for_date)

@router.message(NewTraining.waiting_for_date)
async def save_training(message: Message, state: FSMContext):
    try:
        dt = datetime.strptime(message.text.strip(), "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ (–ø—Ä–∏–º–µ—Ä: 2025-06-11 18:30)")
        return

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO trainings (date, status) VALUES (?, ?)", (dt.isoformat(), "open"))
        conn.commit()

    await message.answer(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ {dt.strftime('%d.%m.%Y %H:%M')}")
    await state.clear()
