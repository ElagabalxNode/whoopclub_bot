from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_connection
from config import ADMINS
from datetime import datetime

router = Router()

@router.message(F.text.contains("–ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"))
async def show_subscription_options(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ -5% 3800‚ÇΩ", callback_data="sub:5"),
            InlineKeyboardButton(text="10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ -10% 7200‚ÇΩ", callback_data="sub:10")
        ]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("sub:"))
async def process_subscription(callback: CallbackQuery):
    count = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    username = callback.from_user.username

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO subscriptions (user_id, count, status, created_at)
            VALUES (?, ?, 'pending', ?)
        """, (user_id, count, datetime.now().isoformat()))
        subscription_id = cursor.lastrowid
        conn.commit()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"sub_paid:{subscription_id}")]
    ])

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ {count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
        f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: +7 905 563 5566 –¢-–ë–∞–Ω–∫\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=kb
    )


@router.callback_query(F.data.startswith("sub_paid:"))
async def notify_admins(callback: CallbackQuery):
    subscription_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    username = callback.from_user.username
    user_link = f"@{username}" if username else f"<a href='tg://user?id={user_id}'>–ø—Ä–æ—Ñ–∏–ª—å</a>"

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT count FROM subscriptions WHERE id = ?", (subscription_id,))
        count = cursor.fetchone()[0]

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"sub_ok:{subscription_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"sub_reject:{subscription_id}")
        ]
    ])

    text = (
        f"üí∞ –ü–æ–∫—É–ø–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞\n"
        f"üë§ {user_link} (ID: <code>{user_id}</code>)\n"
        f"üì¶ {count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )

    for admin in ADMINS:
        await callback.bot.send_message(admin, text, reply_markup=kb)

    await callback.message.edit_text("üîî –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



@router.callback_query(F.data.startswith("sub_ok:"))
async def confirm_subscription(callback: CallbackQuery):
    subscription_id = int(callback.data.split(":")[1])
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, count FROM subscriptions WHERE id = ?", (subscription_id,))
        user_id, count = cursor.fetchone()
        cursor.execute("UPDATE subscriptions SET status = 'confirmed' WHERE id = ?", (subscription_id,))
        cursor.execute("UPDATE users SET subscription = COALESCE(subscription, 0) + ? WHERE user_id = ?", (count, user_id))
        conn.commit()

    await callback.message.edit_text("‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
    await callback.bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")

@router.callback_query(F.data.startswith("sub_reject:"))
async def reject_subscription(callback: CallbackQuery):
    subscription_id = int(callback.data.split(":")[1])
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM subscriptions WHERE id = ?", (subscription_id,))
        user_id = cursor.fetchone()[0]
        cursor.execute("DELETE FROM subscriptions WHERE id = ?", (subscription_id,))
        conn.commit()

    await callback.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    await callback.bot.send_message(user_id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
