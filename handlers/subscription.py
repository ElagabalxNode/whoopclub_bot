from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_connection
from config import ADMINS, PAYMENT_LINK, CARD
from datetime import datetime

router = Router()

PRICES = {
    5: 3800,
    10: 7200
}

@router.message(F.text.contains("–ö—É–ø–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç"))
async def show_subscription_options(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ -5% 3800‚ÇΩ", callback_data="sub:5"),
            InlineKeyboardButton(text="10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ -10% 7200‚ÇΩ", callback_data="sub:10")
        ]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("sub:"))
async def process_subscription(callback: CallbackQuery):
    count = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    username = callback.from_user.username
    price = PRICES.get(count, "?")

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO subscriptions (user_id, count, status, created_at)
            VALUES (?, ?, 'pending', ?)
        """, (user_id, count, datetime.now().isoformat()))
        subscription_id = cursor.lastrowid
        conn.commit()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"sub_paid:{subscription_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_cancel_sub:{subscription_id}")
        ]
    ])

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ <b>{count}</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ <b>{price}‚ÇΩ</b>.\n"
        f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href='{PAYMENT_LINK}'>–û–ü–õ–ê–¢–ò–¢–¨</a>\n"
        f"–õ–∏–±–æ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã <code>{CARD}</code>\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=kb
    )

@router.callback_query(F.data.startswith("sub_paid:"))
async def notify_admins(callback: CallbackQuery):
    subscription_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    username = callback.from_user.username
    user_link = f"@{username}" if username else f"<a href='tg://user?id={user_id}'>–ø—Ä–æ—Ñ–∏–ª—å</a>"

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT count FROM subscriptions WHERE id = ?", (subscription_id,))
        count = cursor.fetchone()[0]

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"sub_ok:{subscription_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"sub_reject:{subscription_id}")
        ]
    ])

    text = (
        f"üí∞ –ü–æ–∫—É–ø–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞\n"
        f"üë§ {user_link} (ID: <code>{user_id}</code>)\n"
        f"üì¶ {count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    )

    for admin in ADMINS:
        msg = await callback.bot.send_message(admin, text, reply_markup=kb, parse_mode="HTML")
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO subscription_notifications (subscription_id, admin_id, message_id)
                VALUES (?, ?, ?)
            """, (subscription_id, admin, msg.message_id))
            conn.commit()

    await callback.message.edit_text("üîî –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.callback_query(F.data.startswith("user_cancel_sub:"))
async def user_cancel_subscription(callback: CallbackQuery):
    subscription_id = int(callback.data.split(":")[1])
    user_id = callback.from_user.id

    with get_connection() as conn:
        cursor = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        cursor.execute("""
            SELECT status FROM subscriptions
            WHERE id = ? AND user_id = ?
        """, (subscription_id, user_id))
        row = cursor.fetchone()

        if not row:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        status = row[0]
        if status != "pending":
            await callback.answer("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        cursor.execute("DELETE FROM subscriptions WHERE id = ?", (subscription_id,))
        conn.commit()

    await callback.message.edit_text("‚ùå –ü–æ–∫—É–ø–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@router.callback_query(F.data.startswith("sub_ok:"))
async def confirm_subscription(callback: CallbackQuery):
    subscription_id = int(callback.data.split(":")[1])
    admin_name = callback.from_user.full_name

    with get_connection() as conn:
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        cursor.execute("SELECT user_id, count, status FROM subscriptions WHERE id = ?", (subscription_id,))
        result = cursor.fetchone()

        if not result:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        user_id, count, status = result

        if status != "pending":
            await callback.answer("‚ö†Ô∏è –≠—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã
        cursor.execute("UPDATE subscriptions SET status = 'confirmed' WHERE id = ?", (subscription_id,))
        cursor.execute("UPDATE users SET subscription = COALESCE(subscription, 0) + ? WHERE user_id = ?", (count, user_id))
        cursor.execute("SELECT subscription, nickname FROM users WHERE user_id = ?", (user_id,))
        sub_count, nickname = cursor.fetchone()

        conn.commit()

    await callback.message.edit_text("‚úÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
    await callback.bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {sub_count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
    
    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º username –∏ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–Ω–µ –∞–¥–º–∏–Ω–∞)
    try:
        chat_member = await callback.bot.get_chat_member(chat_id=user_id, user_id=user_id)
        full_name = chat_member.user.full_name
        username = chat_member.user.username
    except:
        full_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        username = None
    
    
    user_link = f"@{username}" if username else f"<a href='tg://user?id={user_id}'>{full_name}</a>"

    text = (
        f"üéü –ê–±–æ–Ω–µ–º–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∞–¥–º–∏–Ω–æ–º <b>{admin_name}</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link} (ID: <code>{user_id}</code>)\n"
        f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{count}</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        f"üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{sub_count}</b>"
    )
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT admin_id, message_id FROM subscription_notifications WHERE subscription_id = ?", (subscription_id,))
        messages = cursor.fetchall()
        cursor.execute("DELETE FROM subscription_notifications WHERE subscription_id = ?", (subscription_id,))
        conn.commit()

    for admin_id, message_id in messages:
        try:
            await callback.bot.delete_message(chat_id=admin_id, message_id=message_id)
        except:
            pass        
    for admin in ADMINS:
        await callback.bot.send_message(admin, text, parse_mode="HTML")




@router.callback_query(F.data.startswith("sub_reject:"))
async def reject_subscription(callback: CallbackQuery):
    subscription_id = int(callback.data.split(":")[1])
    admin_name = callback.from_user.full_name

    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, count, status FROM subscriptions WHERE id = ?", (subscription_id,))
        result = cursor.fetchone()

        if not result:
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        user_id, count, status = result

        if status != "pending":
            await callback.answer("‚ö†Ô∏è –≠—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
            return

        cursor.execute("DELETE FROM subscriptions WHERE id = ?", (subscription_id,))
        cursor.execute("SELECT nickname FROM users WHERE user_id = ?", (user_id,))
        nickname_row = cursor.fetchone()
        nickname = nickname_row[0] if nickname_row else "–ø—Ä–æ—Ñ–∏–ª—å"
        conn.commit()

    await callback.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    await callback.bot.send_message(user_id, "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º username –∏ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–Ω–µ –∞–¥–º–∏–Ω–∞)
    try:
        chat_member = await callback.bot.get_chat_member(chat_id=user_id, user_id=user_id)
        full_name = chat_member.user.full_name
        username = chat_member.user.username
    except:
        full_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        username = None
    user_link = f"@{username}" if username else f"<a href='tg://user?id={user_id}'>{full_name}</a>"

    text = (
        f"üö´ –ê–±–æ–Ω–µ–º–µ–Ω—Ç <b>–æ—Ç–∫–ª–æ–Ω—ë–Ω</b> –∞–¥–º–∏–Ω–æ–º <b>{admin_name}</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link} (ID: <code>{user_id}</code>)\n"
        f"üì¶ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: <b>{count}</b> —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
    )
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT admin_id, message_id FROM subscription_notifications WHERE subscription_id = ?", (subscription_id,))
        messages = cursor.fetchall()
        cursor.execute("DELETE FROM subscription_notifications WHERE subscription_id = ?", (subscription_id,))
        conn.commit()

    for admin_id, message_id in messages:
        try:
            await callback.bot.delete_message(chat_id=admin_id, message_id=message_id)
        except:
            pass        
    for admin in ADMINS:
        await callback.bot.send_message(admin, text, parse_mode="HTML")